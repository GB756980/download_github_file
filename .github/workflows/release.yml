name: Create Release # 这个 GitHub Actions 工作流程的名称

on:
  push:
    branches:
      - main  # 当 main 分支有推送事件时触发此工作流程

jobs:
  create-release:
    runs-on: windows-latest # 在最新版本的 Windows 虚拟机上运行此作业

    env:
      GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}  # 从 GitHub Secrets 中获取用于 GitHub 操作的令牌
      BASE_VERSION: '1'  # 定义全局基础版本号

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # 使用 actions/checkout 操作检出代码仓库到工作目录

      - name: Install GitHub CLI
        run: |
          choco install gh # 使用 Chocolatey 安装 GitHub CLI 工具

      - name: Authenticate GitHub CLI
        run: gh auth setup-git # 使用 GitHub CLI 工具进行身份验证以便后续操作

      - name: Determine next version
        id: determine_version
        run: |
          # 获取所有已存在的标签，并以 JSON 格式提取标签名称
          $EXISTING_TAGS = gh release list --json tagName | ConvertFrom-Json | Select-Object -ExpandProperty tagName

          # 从环境变量中读取基础版本号
          $BASE_VERSION = "${{ env.BASE_VERSION }}"

          # 初始化新的版本号为基础版本号和次版本号
          $MAJOR_VERSION = $BASE_VERSION
          $MINOR_VERSION = 0
          $CURRENT_VERSION = "v${MAJOR_VERSION}.${MINOR_VERSION}"

          # 循环检查是否存在相同的版本号。如果存在，则递增次版本号
          while ($EXISTING_TAGS -contains $CURRENT_VERSION) {
            $MINOR_VERSION++
            $CURRENT_VERSION = "v${MAJOR_VERSION}.${MINOR_VERSION}"
          }

          # 确保版本号格式有效
          if ($CURRENT_VERSION -notmatch '^v\d+\.\d+$') {
            Write-Error "Invalid tag format: $CURRENT_VERSION"
            exit 1
          }

          # 将新版本号设置为环境变量，以便后续步骤使用
          Write-Output "new_version=$CURRENT_VERSION" >> $env:GITHUB_ENV

      - name: Create and rename zip file with version
        run: |
          New-Item -ItemType Directory -Force -Path output # 创建输出目录
          Compress-Archive -Path github_files_info.txt, download_github_file.bat -DestinationPath output\download_github_file_${{ env.new_version }}.zip # 将文件打包成 ZIP 文件

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 # 使用 create-release 操作创建一个新的 GitHub 发布
        with:
          tag_name: ${{ env.new_version }} # 使用新版本号作为标签名
          release_name: ${{ env.new_version }} # 使用新版本号作为发布名称
          draft: false # 设置发布为非草稿状态（即正式发布）
          prerelease: false # 设置发布为正式版本（不是预发布版本）

      - name: Upload asset to Release
        uses: actions/upload-release-asset@v1 # 上传发布资产（如文件）到 GitHub Release
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 使用 create-release 步骤的输出 URL 作为上传地址
          asset_path: ./output/download_github_file_${{ env.new_version }}.zip # 上传的 ZIP 文件路径
          asset_name: download_github_file_${{ env.new_version }}.zip # 上传的文件名
          asset_content_type: application/zip # 文件的 MIME 类型，指定为 ZIP 文件
